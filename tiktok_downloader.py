import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import requests
import subprocess
import threading
import os
import time
import re 

# --- C·∫§U H√åNH C·ª§ TH·ªÇ ---
# ƒê·∫£m b·∫£o l·ªánh 'yt-dlp' v√† 'ffmpeg' c√≥ trong bi·∫øn m√¥i tr∆∞·ªùng PATH
YT_DLP_COMMAND = 'yt-dlp' 
FFMPEG_COMMAND = 'ffmpeg'

# C·∫£i thi·ªán t·ªëc ƒë·ªô t·∫£i: S·ªë l∆∞·ª£ng lu·ªìng t·∫£i ƒë·ªìng th·ªùi cho m·ªói video (M·∫∑c ƒë·ªãnh: 1)
CONCURRENT_FRAGMENTS = 8 # ƒêi·ªÅu ch·ªânh s·ªë n√†y ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô t·∫£i (4, 8, 16 l√† ph·ªï bi·∫øn)

class DownloaderApp:
    def __init__(self, master):
        self.master = master
        master.title("Video Downloader (TikTok, YouTube & Facebook)")
        
        # Thi·∫øt l·∫≠p Style/Theme cho ttk
        s = ttk.Style()
        s.theme_use('clam') # Ch·ªß ƒë·ªÅ hi·ªán ƒë·∫°i h∆°n
        
        # ƒê·ªãnh nghƒ©a Styles cho c√°c n√∫t m√†u s·∫Øc
        s.configure('Success.TButton', foreground='black', background='#28a745', font=('Arial', 10, 'bold')) # Xanh l√°
        s.map('Success.TButton', background=[('active', '#218838')])
        
        s.configure('Danger.TButton', foreground='white', background='#dc3545', font=('Arial', 10, 'bold')) # ƒê·ªè
        s.map('Danger.TButton', background=[('active', '#c82333')])
        
        s.configure('Info.TButton', foreground='white', background='#17a2b8', font=('Arial', 10, 'bold')) # Xanh d∆∞∆°ng nh·∫°t (Qu√©t/Chuy·ªÉn ƒë·ªïi)
        s.map('Info.TButton', background=[('active', '#138496')])
        
        s.configure('Primary.TButton', foreground='white', background='#007bff', font=('Arial', 10, 'bold')) # Xanh d∆∞∆°ng (TikTok/Youtube)
        s.map('Primary.TButton', background=[('active', '#0056b3')])
        
        s.configure('Secondary.TButton', foreground='white', background='#6c757d', font=('Arial', 10)) # X√°m (Ki·ªÉm tra FFmpeg)
        s.map('Secondary.TButton', background=[('active', '#5a6268')])
        
        # Bi·∫øn tr·∫°ng th√°i chung
        self.is_downloading = False
        self.download_session = None
        self.start_time = None 
        self.process = None 
        
        # Kh·ªüi t·∫°o giao di·ªán Notebook (Tabs)
        self.notebook = ttk.Notebook(master)
        self.notebook.pack(pady=10, padx=10, expand=True, fill="both")

        # Khung cho ch·ª©c nƒÉng ƒê∆°n l·∫ª
        self.tab_single = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.tab_single, text="T·∫£i ƒê∆°n l·∫ª (FLV/MP4)")
        self._create_single_download_widgets(self.tab_single)

        # Khung cho ch·ª©c nƒÉng TikTok H√†ng lo·∫°t
        self.tab_batch_tiktok = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.tab_batch_tiktok, text="T·∫£i H√†ng lo·∫°t TikTok")
        self._create_batch_tiktok_widgets(self.tab_batch_tiktok)
        
        # Khung cho ch·ª©c nƒÉng YouTube Shorts
        self.tab_batch_youtube = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.tab_batch_youtube, text="T·∫£i YouTube Shorts")
        self._create_batch_youtube_widgets(self.tab_batch_youtube)
        
        # Khung cho ch·ª©c nƒÉng Facebook Reels (M·ªöI)
        self.tab_batch_facebook = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.tab_batch_facebook, text="T·∫£i Facebook Reels")
        self._create_batch_facebook_widgets(self.tab_batch_facebook)
        
        # Bi·∫øn tr·∫°ng th√°i H√†ng lo·∫°t
        self.tiktok_total_videos = 0
        self.tiktok_downloaded_count = 0
        self.youtube_total_videos = 0
        self.youtube_downloaded_count = 0
        self.facebook_total_videos = 0 # M·ªöI
        self.facebook_downloaded_count = 0 # M·ªöI


    # =================================================================
    #                      C√ÅC H√ÄM CHUNG/TI·ªÜN √çCH (KH√îNG ƒê·ªîI)
    # =================================================================
    def update_status(self, label, message, color="blue"):
        # S·ª≠ d·ª•ng widget tk.Label ƒë·ªÉ d·ªÖ d√†ng ƒë·ªïi m√†u foreground (fg)
        self.master.after(0, label.config, {"text": message, "fg": color})
        
    def update_progress_label(self, label, downloaded, total):
        self.master.after(0, label.config, {"text": f"{downloaded} / {total}"})
    
    def find_ffmpeg(self):
        """T√¨m FFmpeg trong nhi·ªÅu v·ªã tr√≠ kh√°c nhau"""
        possible_paths = [
            'ffmpeg',  # Trong PATH
            'ffmpeg.exe',  # Windows v·ªõi .exe
            r'C:\ffmpeg\bin\ffmpeg.exe',  # V·ªã tr√≠ ph·ªï bi·∫øn 1
            r'C:\Program Files\ffmpeg\bin\ffmpeg.exe',  # V·ªã tr√≠ ph·ªï bi·∫øn 2
            r'C:\Program Files (x86)\ffmpeg\bin\ffmpeg.exe',  # 32-bit version
            os.path.join(os.path.expanduser('~'), 'ffmpeg', 'bin', 'ffmpeg.exe'),  # User home
            os.path.join(os.path.dirname(os.path.abspath(__file__)), 'ffmpeg.exe'),  # C√πng th∆∞ m·ª•c
            os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bin', 'ffmpeg.exe'),  # Subfolder bin
        ]
        
        for path in possible_paths:
            try:
                result = subprocess.run([path, '-version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    return path
            except (FileNotFoundError, subprocess.TimeoutExpired, OSError, subprocess.CalledProcessError):
                continue
        
        return None
    
    def download_ffmpeg_suggestion(self):
        """H∆∞·ªõng d·∫´n t·∫£i FFmpeg cho Windows"""
        suggestion = """üí° H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T FFMPEG:

üì• C√ÅCH 1 - T·∫£i v·ªÅ th·ªß c√¥ng (KHUY√äN D√ôNG):
1. V√†o: https://www.gyan.dev/ffmpeg/builds/
2. T·∫£i "release builds" ‚Üí ffmpeg-release-essentials.zip
3. Gi·∫£i n√©n v√†o th∆∞ m·ª•c: C:\\ffmpeg\\
4. ƒê·∫£m b·∫£o c√≥ file: C:\\ffmpeg\\bin\\ffmpeg.exe

üîß C√ÅCH 2 - Th√™m v√†o PATH:
1. Sau khi gi·∫£i n√©n FFmpeg
2. Th√™m "C:\\ffmpeg\\bin" v√†o PATH h·ªá th·ªëng
3. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng

‚ö° C√ÅCH 3 - Copy tr·ª±c ti·∫øp:
1. T·∫£i ffmpeg.exe v·ªÅ
2. Copy v√†o c√πng th∆∞ m·ª•c v·ªõi ·ª©ng d·ª•ng n√†y
3. Ch·∫°y l·∫°i ·ª©ng d·ª•ng

üîç Ki·ªÉm tra: Nh·∫•n n√∫t "Ki·ªÉm tra FFmpeg" ƒë·ªÉ test"""
        
        return suggestion


    # =================================================================
    # ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†CH·ª®C NƒÇNG T·∫¢I ƒê∆†N L·∫∫ (TAB 1) - GIAO DI·ªÜN M·ªöI
    # =================================================================
    
    def _create_single_download_widgets(self, master):
        # Khung Input (Link v√† ƒê∆∞·ªùng d·∫´n)
        input_frame = ttk.LabelFrame(master, text="Th√¥ng tin T·∫£i xu·ªëng", padding="10 10 10 10")
        input_frame.pack(padx=5, pady=5, fill="x")
        
        # C·∫•u h√¨nh grid cho input_frame (c·ªôt gi·ªØa m·ªü r·ªông)
        input_frame.columnconfigure(1, weight=1)

        # 1. Link Live Stream
        ttk.Label(input_frame, text="Link Livestream (.flv):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.url_entry = ttk.Entry(input_frame)
        self.url_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew", columnspan=2)
        self.url_entry.insert(0, "https://pull-flv-l11-va01.tiktokcdn.com/...")

        # 2. ƒê∆∞·ªùng d·∫´n l∆∞u file
        ttk.Label(input_frame, text="ƒê∆∞·ªùng d·∫´n l∆∞u File FLV:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.path_entry = ttk.Entry(input_frame)
        self.path_entry.grid(row=1, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(input_frame, text="Duy·ªát...", command=self.browse_save_path).grid(row=1, column=2, sticky="e", padx=5, pady=5)
        
        # Khung ƒêi·ªÅu khi·ªÉn (N√∫t ch·ª©c nƒÉng)
        control_frame = ttk.Frame(master, padding="10 10 10 10")
        control_frame.pack(padx=5, pady=5, fill="x")

        # 3. N√∫t ch·ª©c nƒÉng
        self.single_download_button = ttk.Button(control_frame, text="B·∫Øt ƒë·∫ßu T·∫£i v·ªÅ", command=self.start_download, style='Success.TButton')
        self.single_download_button.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        self.single_stop_button = ttk.Button(control_frame, text="D·ª´ng T·∫£i v·ªÅ", command=self.stop_download, state=tk.DISABLED, style='Danger.TButton')
        self.single_stop_button.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        self.convert_button = ttk.Button(control_frame, text="Chuy·ªÉn ƒë·ªïi sang MP4 (FFmpeg)", command=self.start_convert, state=tk.DISABLED, style='Info.TButton')
        self.convert_button.grid(row=0, column=2, padx=5, pady=5, sticky="w")
        
        # N√∫t ki·ªÉm tra FFmpeg
        self.check_ffmpeg_button = ttk.Button(control_frame, text="üîç Ki·ªÉm tra FFmpeg", command=self.check_ffmpeg, style='Secondary.TButton')
        self.check_ffmpeg_button.grid(row=0, column=3, padx=5, pady=5, sticky="w")

        # Khung Tr·∫°ng th√°i
        status_frame = ttk.LabelFrame(master, text="Tr·∫°ng th√°i T·∫£i xu·ªëng", padding="10 10 10 10")
        status_frame.pack(padx=5, pady=5, fill="x")
        status_frame.columnconfigure(1, weight=1)

        # 4. Khu v·ª±c Tr·∫°ng th√°i
        ttk.Label(status_frame, text="Tr·∫°ng th√°i:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        # Gi·ªØ l·∫°i tk.Label ƒë·ªÉ d·ªÖ d√†ng ƒë·ªïi m√†u tr·∫°ng th√°i (fg)
        self.single_status_label = tk.Label(status_frame, text="S·∫µn s√†ng", fg="blue", wraplength=450, justify=tk.LEFT)
        self.single_status_label.grid(row=0, column=1, sticky="w", padx=5, pady=5)

    # (C√°c h√†m logic t·∫£i ƒë∆°n l·∫ª kh√¥ng ƒë·ªïi)
    def browse_save_path(self):
        default_filename = "tiktok_live_video.flv"
        save_path = filedialog.asksaveasfilename(
            defaultextension=".flv",
            filetypes=[("FLV Video", "*.flv")],
            initialfile=default_filename
        )
        if save_path:
            self.path_entry.delete(0, tk.END)
            self.path_entry.insert(0, save_path)

    def start_download(self):
        url = self.url_entry.get().strip()
        save_path = self.path_entry.get().strip()
        if not url or not save_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß Link Livestream v√† ƒê∆∞·ªùng d·∫´n l∆∞u File.")
            return
        self.update_status(self.single_status_label, "ƒêang chu·∫©n b·ªã t·∫£i v·ªÅ...", "orange")
        self.single_download_button.config(state=tk.DISABLED)
        self.single_stop_button.config(state=tk.NORMAL)
        self.convert_button.config(state=tk.DISABLED)
        self.is_downloading = True
        self.download_thread = threading.Thread(target=self._download_flv, args=(url, save_path))
        self.download_thread.start()

    def stop_download(self):
        self.is_downloading = False
        if self.download_session: self.download_session.close() 
        elapsed_time_formatted = time.strftime("%H:%M:%S", time.gmtime(time.time() - self.start_time)) if self.start_time else "00:00:00"
        self.update_status(self.single_status_label, f"ƒê√£ d·ª´ng t·∫£i v·ªÅ (File c√≥ th·ªÉ b·ªã thi·∫øu). Th·ªùi gian: {elapsed_time_formatted}", "red")
        self.single_download_button.config(state=tk.NORMAL)
        self.single_stop_button.config(state=tk.DISABLED)
        if os.path.exists(self.path_entry.get()): self.convert_button.config(state=tk.NORMAL)

    def _download_flv(self, url, save_path):
        self.start_time = time.time()
        try:
            self.download_session = requests.Session()
            with self.download_session.get(url, stream=True) as r:
                r.raise_for_status() 
                total_size = int(r.headers.get('content-length', 0))
                downloaded_size = 0
                with open(save_path, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192): 
                        if not self.is_downloading: break
                        f.write(chunk)
                        downloaded_size += len(chunk)
                        
                        elapsed_seconds = time.time() - self.start_time
                        elapsed_time_formatted = time.strftime("%H:%M:%S", time.gmtime(elapsed_seconds))
                        progress = downloaded_size / total_size * 100 if total_size else 0
                        status_message = (f"ƒêang t·∫£i: {downloaded_size} bytes ({progress:.2f}%) | ƒê√£ tr√¥i qua: {elapsed_time_formatted}")
                        self.master.after(0, self.update_status, self.single_status_label, status_message, "orange")
                
                final_time_message = time.strftime("%H:%M:%S", time.gmtime(time.time() - self.start_time))
                if self.is_downloading:
                    self.master.after(0, self.update_status, self.single_status_label, f"T·∫£i v·ªÅ HO√ÄN T·∫§T. K√≠ch th∆∞·ªõc: {downloaded_size} bytes. Th·ªùi gian: {final_time_message}", "green")
                else:
                    self.master.after(0, self.update_status, self.single_status_label, f"T·∫£i v·ªÅ ƒê√É D·ª™NG. K√≠ch th∆∞·ªõc: {downloaded_size} bytes. Th·ªùi gian: {final_time_message}", "red")

        except requests.exceptions.RequestException as e:
            self.master.after(0, messagebox.showerror, "L·ªói T·∫£i xu·ªëng", f"L·ªói k·∫øt n·ªëi ho·∫∑c URL kh√¥ng h·ª£p l·ªá: {e}")
            self.master.after(0, self.update_status, self.single_status_label, "L·ªói khi t·∫£i v·ªÅ.", "red")
        finally:
            self.is_downloading = False
            self.download_session = None
            self.start_time = None
            self.master.after(0, self.single_download_button.config, {"state": tk.NORMAL})
            self.master.after(0, self.single_stop_button.config, {"state": tk.DISABLED})
            if os.path.exists(save_path): self.master.after(0, self.convert_button.config, {"state": tk.NORMAL})

    def check_ffmpeg(self):
        """Ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i FFmpeg"""
        ffmpeg_path = self.find_ffmpeg()
        
        if ffmpeg_path:
            try:
                result = subprocess.run([ffmpeg_path, '-version'], 
                                      capture_output=True, text=True, timeout=10)
                version_line = result.stdout.split('\n')[0] if result.stdout else "Unknown version"
                
                success_msg = f"‚úÖ FFMPEG S·∫¥N S√ÄNG!\n\n"
                success_msg += f"üìç V·ªã tr√≠: {ffmpeg_path}\n"
                success_msg += f"üìÑ Phi√™n b·∫£n: {version_line}\n\n"
                success_msg += "üéâ B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng chuy·ªÉn ƒë·ªïi video!"
                
                messagebox.showinfo("FFmpeg OK", success_msg)
                self.update_status(self.single_status_label, "‚úÖ FFmpeg s·∫µn s√†ng", "green")
                
            except Exception as e:
                messagebox.showerror("L·ªói FFmpeg", f"T√¨m th·∫•y FFmpeg nh∆∞ng kh√¥ng th·ªÉ ch·∫°y:\n{e}")
                self.update_status(self.single_status_label, "‚ùå FFmpeg l·ªói", "red")
        else:
            # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt
            error_msg = "‚ùå KH√îNG T√åM TH·∫§Y FFMPEG!\n\n"
            error_msg += self.download_ffmpeg_suggestion()
            
            messagebox.showerror("C·∫ßn c√†i FFmpeg", error_msg)
            self.update_status(self.single_status_label, "‚ùå C·∫ßn c√†i FFmpeg", "red")

    def start_convert(self):
        input_path = self.path_entry.get().strip()
        if not input_path or not os.path.exists(input_path): 
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file FLV ƒë·ªÉ chuy·ªÉn ƒë·ªïi!")
            return
            
        # Ki·ªÉm tra FFmpeg tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi
        ffmpeg_path = self.find_ffmpeg()
        if not ffmpeg_path:
            error_msg = "‚ùå KH√îNG T√åM TH·∫§Y FFMPEG!\n\n"
            error_msg += self.download_ffmpeg_suggestion()
            messagebox.showerror("C·∫ßn c√†i FFmpeg", error_msg)
            return
            
        base, ext = os.path.splitext(input_path)
        output_path = base + ".mp4"
        
        # Ki·ªÉm tra file output ƒë√£ t·ªìn t·∫°i
        if os.path.exists(output_path):
            response = messagebox.askyesno("File t·ªìn t·∫°i", 
                                         f"File {os.path.basename(output_path)} ƒë√£ t·ªìn t·∫°i.\n\nGhi ƒë√®?")
            if not response:
                return
        
        self.update_status(self.single_status_label, "üîÑ ƒêang chuy·ªÉn ƒë·ªïi FLV sang MP4...", "orange")
        self.convert_button.config(state=tk.DISABLED)
        convert_thread = threading.Thread(target=self._convert_flv_to_mp4, args=(input_path, output_path, ffmpeg_path))
        convert_thread.start()

    def _convert_flv_to_mp4(self, input_path, output_path, ffmpeg_path):
        ffmpeg_command = [ffmpeg_path, '-i', input_path, '-c', 'copy', '-y', output_path]  # -y ƒë·ªÉ overwrite
        
        try:
            self.master.after(0, self.update_status, self.single_status_label, 
                            f"‚öôÔ∏è ƒêang x·ª≠ l√Ω v·ªõi FFmpeg: {os.path.basename(ffmpeg_path)}", "blue")
            
            result = subprocess.run(ffmpeg_command, check=True, capture_output=True, text=True)
            
            # Ki·ªÉm tra file output
            if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                file_size = os.path.getsize(output_path) / (1024*1024)  # MB
                success_msg = f"‚úÖ CHUY·ªÇN ƒê·ªîI TH√ÄNH C√îNG!\n"
                success_msg += f"üìÅ File: {os.path.basename(output_path)}\n"
                success_msg += f"üìä K√≠ch th∆∞·ªõc: {file_size:.1f} MB"
                
                self.master.after(0, self.update_status, self.single_status_label, success_msg, "green")
                
                # H·ªèi c√≥ mu·ªën m·ªü th∆∞ m·ª•c kh√¥ng
                self.master.after(0, self._ask_open_folder, os.path.dirname(output_path))
            else:
                self.master.after(0, self.update_status, self.single_status_label, 
                                "‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i - File output kh√¥ng h·ª£p l·ªá", "red")
                
        except subprocess.CalledProcessError as e:
            error_detail = e.stderr if e.stderr else "L·ªói kh√¥ng x√°c ƒë·ªãnh"
            self.master.after(0, messagebox.showerror, "L·ªói Chuy·ªÉn ƒë·ªïi", 
                            f"FFmpeg th·∫•t b·∫°i:\n{error_detail[:300]}")
            self.master.after(0, self.update_status, self.single_status_label, "‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi", "red")
        except Exception as e:
            self.master.after(0, messagebox.showerror, "L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            self.master.after(0, self.update_status, self.single_status_label, "‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh", "red")
        finally:
            self.master.after(0, self.convert_button.config, {"state": tk.NORMAL})
    
    def _ask_open_folder(self, folder_path):
        """H·ªèi c√≥ mu·ªën m·ªü th∆∞ m·ª•c ch·ª©a file ƒë√£ chuy·ªÉn ƒë·ªïi"""
        response = messagebox.askyesno("M·ªü th∆∞ m·ª•c", "Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!\n\nM·ªü th∆∞ m·ª•c ch·ª©a file MP4?")
        if response:
            try:
                if os.name == 'nt':  # Windows
                    subprocess.run(['explorer', folder_path])
                elif os.name == 'posix':  # macOS/Linux
                    subprocess.run(['open' if 'darwin' in os.uname().sysname.lower() else 'xdg-open', folder_path])
            except Exception as e:
                messagebox.showinfo("Th√¥ng b√°o", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c t·ª± ƒë·ªông.\nV·ªã tr√≠ file: {folder_path}")


    # =================================================================
    # ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†CH·ª®C NƒÇNG T·∫¢I H√ÄNG LO·∫†T TIKTOK (TAB 2) - GIAO DI·ªÜN M·ªöI
    # =================================================================
    def _create_batch_tiktok_widgets(self, master):
        # Khung C·∫•u h√¨nh
        config_frame = ttk.LabelFrame(master, text="C·∫•u h√¨nh T·∫£i h√†ng lo·∫°t TikTok", padding="10 10 10 10")
        config_frame.pack(padx=5, pady=5, fill="x")
        config_frame.columnconfigure(1, weight=1) # C·ªôt gi·ªØa m·ªü r·ªông

        # 1. Input Cookie
        ttk.Label(config_frame, text="ƒê∆∞·ªùng d·∫´n file Cookies (.txt):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.tiktok_cookie_path_entry = ttk.Entry(config_frame)
        self.tiktok_cookie_path_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(config_frame, text="Duy·ªát...", command=self.browse_tiktok_cookies).grid(row=0, column=2, sticky="e", padx=5, pady=5)

        # 2. Input Link TikTok
        ttk.Label(config_frame, text="Link Trang TikTok (@username):").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.tiktok_url_entry = ttk.Entry(config_frame)
        self.tiktok_url_entry.grid(row=1, column=1, sticky="ew", padx=5, pady=5, columnspan=2)

        # 3. N√∫t Qu√©t v√† S·ªë l∆∞·ª£ng Video
        self.tiktok_scan_button = ttk.Button(config_frame, text="Qu√©t T·ªïng Video", command=self.start_tiktok_scan, style='Info.TButton')
        self.tiktok_scan_button.grid(row=2, column=0, padx=5, pady=10, sticky="w")
        
        ttk.Label(config_frame, text="S·ªë l∆∞·ª£ng Video mu·ªën t·∫£i:").grid(row=2, column=1, sticky="e", padx=5, pady=10)
        self.tiktok_max_videos_entry = ttk.Entry(config_frame, width=10)
        self.tiktok_max_videos_entry.insert(0, "T·∫•t c·∫£")
        self.tiktok_max_videos_entry.grid(row=2, column=2, sticky="e", padx=5, pady=10)

        # 4. ƒê∆∞·ªùng d·∫´n l∆∞u
        ttk.Label(config_frame, text="Th∆∞ m·ª•c L∆∞u File:").grid(row=3, column=0, sticky="w", padx=5, pady=5)
        self.tiktok_batch_dir_entry = ttk.Entry(config_frame)
        self.tiktok_batch_dir_entry.grid(row=3, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(config_frame, text="Duy·ªát...", command=self.browse_tiktok_download_dir).grid(row=3, column=2, sticky="e", padx=5, pady=5)

        # Khung ƒêi·ªÅu khi·ªÉn & Tr·∫°ng th√°i
        status_control_frame = ttk.LabelFrame(master, text="Ti·∫øn tr√¨nh T·∫£i xu·ªëng", padding="10 10 10 10")
        status_control_frame.pack(padx=5, pady=5, fill="x")
        status_control_frame.columnconfigure(1, weight=1) 

        # 5. N√∫t B·∫Øt ƒë·∫ßu T·∫£i
        self.tiktok_batch_download_button = ttk.Button(status_control_frame, text="B·∫ÆT ƒê·∫¶U T·∫¢I H√ÄNG LO·∫†T", command=self.start_tiktok_batch_download, style='Primary.TButton', state=tk.DISABLED)
        self.tiktok_batch_download_button.grid(row=0, column=0, padx=5, pady=10, sticky="w")
        
        self.tiktok_batch_stop_button = ttk.Button(status_control_frame, text="D·ª´ng T·∫£i H√†ng lo·∫°t", command=self.stop_tiktok_batch_download, style='Danger.TButton', state=tk.DISABLED)
        self.tiktok_batch_stop_button.grid(row=0, column=2, padx=5, pady=10, sticky="e")

        # 6. Khu v·ª±c Tr·∫°ng th√°i
        ttk.Label(status_control_frame, text="Tr·∫°ng th√°i:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.tiktok_batch_status_label = tk.Label(status_control_frame, text="Ch·ªù qu√©t...", fg="blue", wraplength=400, justify=tk.LEFT)
        self.tiktok_batch_status_label.grid(row=1, column=1, columnspan=2, sticky="w", padx=5, pady=5)
        
        ttk.Label(status_control_frame, text="Ti·∫øn tr√¨nh:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.tiktok_progress_label = tk.Label(status_control_frame, text="0/0", fg="purple")
        self.tiktok_progress_label.grid(row=2, column=1, columnspan=2, sticky="w", padx=5, pady=5)

    # (C√°c h√†m logic t·∫£i TikTok kh√¥ng ƒë·ªïi)
    def browse_tiktok_cookies(self):
        cookie_path = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("Cookies File", "*.txt")])
        if cookie_path: self.tiktok_cookie_path_entry.delete(0, tk.END); self.tiktok_cookie_path_entry.insert(0, cookie_path)

    def browse_tiktok_download_dir(self):
        download_dir = filedialog.askdirectory()
        if download_dir: self.tiktok_batch_dir_entry.delete(0, tk.END); self.tiktok_batch_dir_entry.insert(0, download_dir)

    def start_tiktok_scan(self):
        url = self.tiktok_url_entry.get().strip()
        cookie_path = self.tiktok_cookie_path_entry.get().strip()
        if not url: messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p Link Trang TikTok."); return
        if not os.path.exists(cookie_path) and cookie_path: messagebox.showwarning("C·∫£nh b√°o", "File cookies kh√¥ng t·ªìn t·∫°i. Ti·∫øp t·ª•c qu√©t m√† kh√¥ng c√≥ cookies.");
        
        self.update_status(self.tiktok_batch_status_label, "ƒêang qu√©t trang TikTok ƒë·ªÉ ƒë·∫øm video...", "orange")
        self.tiktok_scan_button.config(state=tk.DISABLED)
        self.tiktok_batch_download_button.config(state=tk.DISABLED)
        
        threading.Thread(target=self._scan_tiktok_videos, args=(url, cookie_path)).start()

    def _scan_tiktok_videos(self, url, cookie_path):
        scan_command = [YT_DLP_COMMAND, "--flat-playlist", "--skip-download", "--print-json", url]
        if os.path.exists(cookie_path): scan_command.extend(["--cookies", cookie_path])
        
        try:
            result = subprocess.run(scan_command, capture_output=True, text=True, check=False)
            video_lines = [line for line in result.stdout.splitlines() if line.strip().startswith('{')]
            self.tiktok_total_videos = len(video_lines)
            self.tiktok_downloaded_count = 0
            
            if self.tiktok_total_videos > 0:
                self.master.after(0, self.update_status, self.tiktok_batch_status_label, f"QU√âT HO√ÄN T·∫§T. T√¨m th·∫•y {self.tiktok_total_videos} video.", "green")
                self.master.after(0, self.tiktok_batch_download_button.config, {"state": tk.NORMAL})
            else:
                self.master.after(0, self.update_status, self.tiktok_batch_status_label, f"Qu√©t th·∫•t b·∫°i/Kh√¥ng c√≥ video. Ki·ªÉm tra URL/Cookies.", "red")
                self.master.after(0, self.tiktok_batch_download_button.config, {"state": tk.DISABLED})
        except FileNotFoundError:
            self.master.after(0, self.update_status, self.tiktok_batch_status_label, "L·ªói Qu√©t: Kh√¥ng t√¨m th·∫•y yt-dlp.", "red")

        self.master.after(0, self.update_progress_label, self.tiktok_progress_label, self.tiktok_downloaded_count, self.tiktok_total_videos)
        self.master.after(0, self.tiktok_scan_button.config, {"state": tk.NORMAL})
    
    def start_tiktok_batch_download(self):
        url = self.tiktok_url_entry.get().strip()
        cookie_path = self.tiktok_cookie_path_entry.get().strip()
        download_dir = self.tiktok_batch_dir_entry.get().strip()
        max_videos_str = self.tiktok_max_videos_entry.get().strip()
        if not download_dir or not os.path.isdir(download_dir): messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c l∆∞u tr·ªØ h·ª£p l·ªá."); return
        try: max_videos = int(max_videos_str) if max_videos_str.lower() != "t·∫•t c·∫£" else None
        except ValueError: messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng video kh√¥ng h·ª£p l·ªá."); return

        self.update_status(self.tiktok_batch_status_label, "ƒêang b·∫Øt ƒë·∫ßu t·∫£i h√†ng lo·∫°t...", "purple")
        self.tiktok_scan_button.config(state=tk.DISABLED)
        self.tiktok_batch_download_button.config(state=tk.DISABLED)
        self.tiktok_batch_stop_button.config(state=tk.NORMAL)
        self.is_downloading = True
        self.tiktok_downloaded_count = 0
        self.update_progress_label(self.tiktok_progress_label, self.tiktok_downloaded_count, self.tiktok_total_videos)
        
        self.download_thread = threading.Thread(target=self._batch_download_logic, args=(url, cookie_path, download_dir, max_videos, self.tiktok_batch_status_label, self.tiktok_progress_label, "tiktok"))
        self.download_thread.start()

    def stop_tiktok_batch_download(self):
        self._stop_batch_download_logic(self.tiktok_batch_status_label, self.tiktok_scan_button, self.tiktok_batch_download_button, self.tiktok_batch_stop_button, self.tiktok_downloaded_count, self.tiktok_total_videos)
        
    
    # =================================================================
    # ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†CH·ª®C NƒÇNG T·∫¢I YOUTUBE SHORTS (TAB 3) - GIAO DI·ªÜN M·ªöI
    # =================================================================

    def _create_batch_youtube_widgets(self, master):
        # Khung C·∫•u h√¨nh
        config_frame = ttk.LabelFrame(master, text="C·∫•u h√¨nh T·∫£i h√†ng lo·∫°t YouTube Shorts", padding="10 10 10 10")
        config_frame.pack(padx=5, pady=5, fill="x")
        config_frame.columnconfigure(1, weight=1) # C·ªôt gi·ªØa m·ªü r·ªông

        # 1. Input Link YouTube K√™nh
        ttk.Label(config_frame, text="Link K√™nh YouTube (@username):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.youtube_url_entry = ttk.Entry(config_frame)
        self.youtube_url_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=5, columnspan=2)

        # 2. N√∫t Qu√©t v√† S·ªë l∆∞·ª£ng Video
        self.youtube_scan_button = ttk.Button(config_frame, text="Qu√©t T·ªïng Shorts (<60s)", command=self.start_youtube_scan, style='Info.TButton')
        self.youtube_scan_button.grid(row=1, column=0, padx=5, pady=10, sticky="w")
        
        ttk.Label(config_frame, text="S·ªë l∆∞·ª£ng Shorts mu·ªën t·∫£i:").grid(row=1, column=1, sticky="e", padx=5, pady=10)
        self.youtube_max_videos_entry = ttk.Entry(config_frame, width=10)
        self.youtube_max_videos_entry.insert(0, "T·∫•t c·∫£")
        self.youtube_max_videos_entry.grid(row=1, column=2, sticky="e", padx=5, pady=10)

        # 3. ƒê∆∞·ªùng d·∫´n l∆∞u
        ttk.Label(config_frame, text="Th∆∞ m·ª•c L∆∞u File:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.youtube_batch_dir_entry = ttk.Entry(config_frame)
        self.youtube_batch_dir_entry.grid(row=2, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(config_frame, text="Duy·ªát...", command=self.browse_youtube_download_dir).grid(row=2, column=2, sticky="e", padx=5, pady=5)

        # Khung ƒêi·ªÅu khi·ªÉn & Tr·∫°ng th√°i
        status_control_frame = ttk.LabelFrame(master, text="Ti·∫øn tr√¨nh T·∫£i xu·ªëng", padding="10 10 10 10")
        status_control_frame.pack(padx=5, pady=5, fill="x")
        status_control_frame.columnconfigure(1, weight=1) 

        # 4. N√∫t B·∫Øt ƒë·∫ßu T·∫£i
        self.youtube_batch_download_button = ttk.Button(status_control_frame, text="B·∫ÆT ƒê·∫¶U T·∫¢I SHORTS", command=self.start_youtube_batch_download, style='Primary.TButton', state=tk.DISABLED)
        self.youtube_batch_download_button.grid(row=0, column=0, padx=5, pady=10, sticky="w")
        
        self.youtube_batch_stop_button = ttk.Button(status_control_frame, text="D·ª´ng T·∫£i Shorts", command=self.stop_youtube_batch_download, style='Danger.TButton', state=tk.DISABLED)
        self.youtube_batch_stop_button.grid(row=0, column=2, padx=5, pady=10, sticky="e")

        # 5. Khu v·ª±c Tr·∫°ng th√°i
        ttk.Label(status_control_frame, text="Tr·∫°ng th√°i:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.youtube_batch_status_label = tk.Label(status_control_frame, text="Ch·ªù qu√©t...", fg="blue", wraplength=400, justify=tk.LEFT)
        self.youtube_batch_status_label.grid(row=1, column=1, columnspan=2, sticky="w", padx=5, pady=5)
        
        ttk.Label(status_control_frame, text="Ti·∫øn tr√¨nh:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.youtube_progress_label = tk.Label(status_control_frame, text="0/0", fg="purple")
        self.youtube_progress_label.grid(row=2, column=1, columnspan=2, sticky="w", padx=5, pady=5)

    # (C√°c h√†m logic t·∫£i Youtube kh√¥ng ƒë·ªïi)
    def browse_youtube_download_dir(self):
        download_dir = filedialog.askdirectory()
        if download_dir: self.youtube_batch_dir_entry.delete(0, tk.END); self.youtube_batch_dir_entry.insert(0, download_dir)

    def start_youtube_scan(self):
        url = self.youtube_url_entry.get().strip()
        if not url: messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p Link K√™nh YouTube."); return
        
        self.update_status(self.youtube_batch_status_label, "ƒêang qu√©t k√™nh YouTube ƒë·ªÉ ƒë·∫øm Shorts...", "orange")
        self.youtube_scan_button.config(state=tk.DISABLED)
        self.youtube_batch_download_button.config(state=tk.DISABLED)
        
        threading.Thread(target=self._scan_youtube_videos, args=(url,)).start()

    def _scan_youtube_videos(self, url):
        scan_command = [
            YT_DLP_COMMAND, 
            "--flat-playlist", 
            "--skip-download", 
            "--print-json", 
            "--match-filter", "duration <= 60", 
            "--ignore-errors", 
            url
        ]
        
        try:
            result = subprocess.run(scan_command, capture_output=True, text=True, check=False)
            video_lines = [line for line in result.stdout.splitlines() if line.strip().startswith('{')]
            self.youtube_total_videos = len(video_lines)
            self.youtube_downloaded_count = 0
            
            if self.youtube_total_videos > 0:
                self.master.after(0, self.update_status, self.youtube_batch_status_label, f"QU√âT HO√ÄN T·∫§T. T√¨m th·∫•y {self.youtube_total_videos} Shorts.", "green")
                self.master.after(0, self.youtube_batch_download_button.config, {"state": tk.NORMAL})
            else:
                self.master.after(0, self.update_status, self.youtube_batch_status_label, f"Qu√©t th·∫•t b·∫°i/Kh√¥ng c√≥ Shorts. Ki·ªÉm tra URL.", "red")
                self.master.after(0, self.youtube_batch_download_button.config, {"state": tk.DISABLED})
        except FileNotFoundError:
            self.master.after(0, self.update_status, self.youtube_batch_status_label, "L·ªói Qu√©t: Kh√¥ng t√¨m th·∫•y yt-dlp.", "red")

        self.master.after(0, self.update_progress_label, self.youtube_progress_label, self.youtube_downloaded_count, self.youtube_total_videos)
        self.master.after(0, self.youtube_scan_button.config, {"state": tk.NORMAL})

    def start_youtube_batch_download(self):
        url = self.youtube_url_entry.get().strip()
        download_dir = self.youtube_batch_dir_entry.get().strip()
        max_videos_str = self.youtube_max_videos_entry.get().strip()
        
        if not download_dir or not os.path.isdir(download_dir): messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c l∆∞u tr·ªØ h·ª£p l·ªá."); return
        try: max_videos = int(max_videos_str) if max_videos_str.lower() != "t·∫•t c·∫£" else None
        except ValueError: messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng video kh√¥ng h·ª£p l·ªá."); return

        self.update_status(self.youtube_batch_status_label, "ƒêang b·∫Øt ƒë·∫ßu t·∫£i Shorts...", "purple")
        self.youtube_scan_button.config(state=tk.DISABLED)
        self.youtube_batch_download_button.config(state=tk.DISABLED)
        self.youtube_batch_stop_button.config(state=tk.NORMAL)
        self.is_downloading = True
        self.youtube_downloaded_count = 0
        self.update_progress_label(self.youtube_progress_label, self.youtube_downloaded_count, self.youtube_total_videos)
        
        self.download_thread = threading.Thread(target=self._batch_download_logic, args=(url, None, download_dir, max_videos, self.youtube_batch_status_label, self.youtube_progress_label, "youtube"))
        self.download_thread.start()

    def stop_youtube_batch_download(self):
        self._stop_batch_download_logic(self.youtube_batch_status_label, self.youtube_scan_button, self.youtube_batch_download_button, self.youtube_batch_stop_button, self.youtube_downloaded_count, self.youtube_total_videos)

    # =================================================================
    # ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†CH·ª®C NƒÇNG T·∫¢I FACEBOOK REELS (TAB 4 - M·ªöI) - GIAO DI·ªÜN M·ªöI
    # =================================================================
    
    def _create_batch_facebook_widgets(self, master):
        # Khung C·∫•u h√¨nh
        config_frame = ttk.LabelFrame(master, text="C·∫•u h√¨nh T·∫£i h√†ng lo·∫°t Facebook Reels", padding="10 10 10 10")
        config_frame.pack(padx=5, pady=5, fill="x")
        config_frame.columnconfigure(1, weight=1) # C·ªôt gi·ªØa m·ªü r·ªông

        # 1. Input Cookie (R·∫•t quan tr·ªçng cho Facebook)
        ttk.Label(config_frame, text="ƒê∆∞·ªùng d·∫´n file Cookies (.txt):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.facebook_cookie_path_entry = ttk.Entry(config_frame)
        self.facebook_cookie_path_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(config_frame, text="Duy·ªát...", command=self.browse_facebook_cookies).grid(row=0, column=2, sticky="e", padx=5, pady=5)

        # 2. Input Link Trang Facebook
        ttk.Label(config_frame, text="Link Trang/H·ªì s∆° Facebook:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.facebook_url_entry = ttk.Entry(config_frame)
        self.facebook_url_entry.grid(row=1, column=1, sticky="ew", padx=5, pady=5, columnspan=2)

        # 3. N√∫t Qu√©t v√† S·ªë l∆∞·ª£ng Video
        self.facebook_scan_button = ttk.Button(config_frame, text="Qu√©t T·ªïng Reels", command=self.start_facebook_scan, style='Info.TButton')
        self.facebook_scan_button.grid(row=2, column=0, padx=5, pady=10, sticky="w")
        
        ttk.Label(config_frame, text="S·ªë l∆∞·ª£ng Reels mu·ªën t·∫£i:").grid(row=2, column=1, sticky="e", padx=5, pady=10)
        self.facebook_max_videos_entry = ttk.Entry(config_frame, width=10)
        self.facebook_max_videos_entry.insert(0, "T·∫•t c·∫£")
        self.facebook_max_videos_entry.grid(row=2, column=2, sticky="e", padx=5, pady=10)

        # 4. ƒê∆∞·ªùng d·∫´n l∆∞u
        ttk.Label(config_frame, text="Th∆∞ m·ª•c L∆∞u File:").grid(row=3, column=0, sticky="w", padx=5, pady=5)
        self.facebook_batch_dir_entry = ttk.Entry(config_frame)
        self.facebook_batch_dir_entry.grid(row=3, column=1, sticky="ew", padx=5, pady=5)
        ttk.Button(config_frame, text="Duy·ªát...", command=self.browse_facebook_download_dir).grid(row=3, column=2, sticky="e", padx=5, pady=5)

        # Khung ƒêi·ªÅu khi·ªÉn & Tr·∫°ng th√°i
        status_control_frame = ttk.LabelFrame(master, text="Ti·∫øn tr√¨nh T·∫£i xu·ªëng", padding="10 10 10 10")
        status_control_frame.pack(padx=5, pady=5, fill="x")
        status_control_frame.columnconfigure(1, weight=1) 

        # 5. N√∫t B·∫Øt ƒë·∫ßu T·∫£i
        self.facebook_batch_download_button = ttk.Button(status_control_frame, text="B·∫ÆT ƒê·∫¶U T·∫¢I REELS", command=self.start_facebook_batch_download, style='Primary.TButton', state=tk.DISABLED)
        self.facebook_batch_download_button.grid(row=0, column=0, padx=5, pady=10, sticky="w")
        
        self.facebook_batch_stop_button = ttk.Button(status_control_frame, text="D·ª´ng T·∫£i Reels", command=self.stop_facebook_batch_download, style='Danger.TButton', state=tk.DISABLED)
        self.facebook_batch_stop_button.grid(row=0, column=2, padx=5, pady=10, sticky="e")

        # 6. Khu v·ª±c Tr·∫°ng th√°i
        ttk.Label(status_control_frame, text="Tr·∫°ng th√°i:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.facebook_batch_status_label = tk.Label(status_control_frame, text="Ch·ªù qu√©t...", fg="blue", wraplength=400, justify=tk.LEFT)
        self.facebook_batch_status_label.grid(row=1, column=1, columnspan=2, sticky="w", padx=5, pady=5)
        
        ttk.Label(status_control_frame, text="Ti·∫øn tr√¨nh:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.facebook_progress_label = tk.Label(status_control_frame, text="0/0", fg="purple")
        self.facebook_progress_label.grid(row=2, column=1, columnspan=2, sticky="w", padx=5, pady=5)

    # (C√°c h√†m logic t·∫£i Facebook kh√¥ng ƒë·ªïi)
    def browse_facebook_cookies(self):
        cookie_path = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("Cookies File", "*.txt")])
        if cookie_path: self.facebook_cookie_path_entry.delete(0, tk.END); self.facebook_cookie_path_entry.insert(0, cookie_path)

    def browse_facebook_download_dir(self):
        download_dir = filedialog.askdirectory()
        if download_dir: self.facebook_batch_dir_entry.delete(0, tk.END); self.facebook_batch_dir_entry.insert(0, download_dir)
    
    def start_facebook_scan(self):
        url = self.facebook_url_entry.get().strip()
        cookie_path = self.facebook_cookie_path_entry.get().strip()
        if not url: messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p Link Trang Facebook."); return
        if not os.path.exists(cookie_path): messagebox.showwarning("C·∫£nh b√°o", "File cookies kh√¥ng t·ªìn t·∫°i. R·∫•t c√≥ th·ªÉ vi·ªác qu√©t s·∫Ω th·∫•t b·∫°i.");
        
        self.update_status(self.facebook_batch_status_label, "ƒêang qu√©t Trang Facebook ƒë·ªÉ ƒë·∫øm Reels...", "orange")
        self.facebook_scan_button.config(state=tk.DISABLED)
        self.facebook_batch_download_button.config(state=tk.DISABLED)
        
        threading.Thread(target=self._scan_facebook_videos, args=(url, cookie_path)).start()

    def _scan_facebook_videos(self, url, cookie_path):
        # KHUY√äN D√ôNG: Y√™u c·∫ßu URL Trang ch√≠nh (v√≠ d·ª•: https://www.facebook.com/caulong.official)
        
        scan_command = [
            YT_DLP_COMMAND, 
            "--flat-playlist",            # Ch·ªâ l·∫•y th√¥ng tin m√† kh√¥ng t·∫£i
            "--dump-json",                # In ra c·∫•u tr√∫c JSON c·ªßa playlist
            "--ignore-errors",            # B·ªè qua c√°c l·ªói video ƒë∆°n l·∫ª
            "--sleep-requests", "1",      # Gi·∫£m t·ªëc ƒë·ªô y√™u c·∫ßu (khuy√™n d√πng cho FB)
            url
        ]
        
        # Th√™m cookie n·∫øu c√≥
        if os.path.exists(cookie_path): 
            scan_command.extend(["--cookies", cookie_path])
        
        try:
            self.update_status(self.facebook_batch_status_label, "ƒêang qu√©t Trang Facebook ƒë·ªÉ ƒë·∫øm Reels...", "orange")
            result = subprocess.run(scan_command, capture_output=True, text=True, check=False, timeout=60) # Th√™m timeout
            
            # Ph√¢n t√≠ch ƒë·∫ßu ra: Ch·ªâ c·∫ßn ƒë·∫øm s·ªë l∆∞·ª£ng c√°c m·ª•c JSON h·ª£p l·ªá
            video_lines = [line for line in result.stdout.splitlines() if line.strip().startswith('{')]
            
            if not video_lines and result.stderr:
                 self.master.after(0, self.update_status, self.facebook_batch_status_label, f"Qu√©t th·∫•t b·∫°i. L·ªói: {result.stderr.strip()[:150]}", "red")
                 self.master.after(0, self.facebook_batch_download_button.config, {"state": tk.DISABLED})
                 self.master.after(0, self.facebook_scan_button.config, {"state": tk.NORMAL})
                 return

            self.facebook_total_videos = len(video_lines)
            self.facebook_downloaded_count = 0
            
            if self.facebook_total_videos > 0:
                self.master.after(0, self.update_status, self.facebook_batch_status_label, f"QU√âT HO√ÄN T·∫§T. T√¨m th·∫•y {self.facebook_total_videos} Reels/B√†i ƒëƒÉng.", "green")
                self.master.after(0, self.facebook_batch_download_button.config, {"state": tk.NORMAL})
            else:
                self.master.after(0, self.update_status, self.facebook_batch_status_label, f"Qu√©t th·∫•t b·∫°i/Kh√¥ng c√≥ video. Vui l√≤ng ki·ªÉm tra l·∫°i URL v√† COOKIES.", "red")
                self.master.after(0, self.facebook_batch_download_button.config, {"state": tk.DISABLED})
        
        except FileNotFoundError:
            self.master.after(0, self.update_status, self.facebook_batch_status_label, "L·ªói Qu√©t: Kh√¥ng t√¨m th·∫•y yt-dlp.", "red")
        except subprocess.TimeoutExpired:
            self.master.after(0, self.update_status, self.facebook_batch_status_label, "L·ªói Qu√©t: H·∫øt th·ªùi gian ch·ªù (60s). Cookies/URL c√≥ th·ªÉ sai.", "red")


        self.master.after(0, self.update_progress_label, self.facebook_progress_label, self.facebook_downloaded_count, self.facebook_total_videos)
        self.master.after(0, self.facebook_scan_button.config, {"state": tk.NORMAL})

    def start_facebook_batch_download(self):
        url = self.facebook_url_entry.get().strip()
        cookie_path = self.facebook_cookie_path_entry.get().strip()
        download_dir = self.facebook_batch_dir_entry.get().strip()
        max_videos_str = self.facebook_max_videos_entry.get().strip()
        
        if not download_dir or not os.path.isdir(download_dir): messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c l∆∞u tr·ªØ h·ª£p l·ªá."); return
        try: max_videos = int(max_videos_str) if max_videos_str.lower() != "t·∫•t c·∫£" else None
        except ValueError: messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng video kh√¥ng h·ª£p l·ªá."); return

        self.update_status(self.facebook_batch_status_label, "ƒêang b·∫Øt ƒë·∫ßu t·∫£i Reels...", "purple")
        self.facebook_scan_button.config(state=tk.DISABLED)
        self.facebook_batch_download_button.config(state=tk.DISABLED)
        self.facebook_batch_stop_button.config(state=tk.NORMAL)
        self.is_downloading = True
        self.facebook_downloaded_count = 0
        self.update_progress_label(self.facebook_progress_label, self.facebook_downloaded_count, self.facebook_total_videos)
        
        self.download_thread = threading.Thread(target=self._batch_download_logic, args=(url, cookie_path, download_dir, max_videos, self.facebook_batch_status_label, self.facebook_progress_label, "facebook"))
        self.download_thread.start()

    def stop_facebook_batch_download(self):
        self._stop_batch_download_logic(self.facebook_batch_status_label, self.facebook_scan_button, self.facebook_batch_download_button, self.facebook_batch_stop_button, self.facebook_downloaded_count, self.facebook_total_videos)

    # =================================================================
    # ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†LOGIC CHUNG CHO T·∫¢I H√ÄNG LO·∫†T (KH√îNG ƒê·ªîI)
    # =================================================================
    def _stop_batch_download_logic(self, status_label, scan_btn, download_btn, stop_btn, downloaded_count, total_videos):
        self.is_downloading = False
        if self.process and self.process.poll() is None:
            self.process.terminate()
        # Ch·ªù m·ªôt l√°t cho qu√° tr√¨nh con k·∫øt th√∫c
        if self.process:
            try:
                self.process.wait(timeout=2)
            except subprocess.TimeoutExpired:
                pass
                
        self.update_status(status_label, f"ƒê√É D·ª™NG T·∫¢I. ƒê√£ t·∫£i {downloaded_count}/{total_videos}.", "red")
        
        self.master.after(0, scan_btn.config, {"state": tk.NORMAL})
        self.master.after(0, download_btn.config, {"state": tk.NORMAL})
        self.master.after(0, stop_btn.config, {"state": tk.DISABLED})
        
    def _batch_download_logic(self, url, cookie_path, download_dir, max_videos, status_label, progress_label, source):
        # Thi·∫øt l·∫≠p l·ªánh t·∫£i yt-dlp
        command = [
            YT_DLP_COMMAND,
            "-P", download_dir, 
            "-o", "%(title)s.%(ext)s", 
            url
        ]
        
        # √ÅP D·ª§NG C·∫¢I THI·ªÜN T·ªêC ƒê·ªò T·∫¢I
        if CONCURRENT_FRAGMENTS > 1:
            command.extend(["-N", str(CONCURRENT_FRAGMENTS)]) 
            self.update_status(status_label, f"ƒêang s·ª≠ d·ª•ng t·∫£i ƒëa lu·ªìng: {CONCURRENT_FRAGMENTS} lu·ªìng...", "blue")

        current_downloaded = 0
        current_total = 0
        
        # 1. Thi·∫øt l·∫≠p c√°c th√¥ng s·ªë ban ƒë·∫ßu v√† l·∫•y t·ªïng s·ªë video ƒë√£ qu√©t
        if source == "youtube":
            command.extend(["--match-filter", "duration <= 60", "--ignore-errors"])
            self.youtube_downloaded_count = 0 
            current_total = self.youtube_total_videos
        elif source == "tiktok":
            if cookie_path and os.path.exists(cookie_path): command.extend(["--cookies", cookie_path])
            self.tiktok_downloaded_count = 0 
            current_total = self.tiktok_total_videos
        elif source == "facebook": # LOGIC FACEBOOK
            if cookie_path and os.path.exists(cookie_path): command.extend(["--cookies", cookie_path])
            self.facebook_downloaded_count = 0 
            current_total = self.facebook_total_videos

        # 2. √Åp d·ª•ng gi·ªõi h·∫°n t·∫£i v√† ƒëi·ªÅu ch·ªânh t·ªïng s·ªë hi·ªÉn th·ªã (current_total)
        if max_videos is not None and max_videos > 0:
            command.extend(["--max-downloads", str(max_videos)])
            current_total = min(current_total, max_videos)

        try:
            self.process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1, universal_newlines=True)
            
            for line in self.process.stdout:
                if not self.is_downloading: break
                
                # C·∫¨P NH·∫¨T LOGIC B·ªò ƒê·∫æM: S·ª≠a l·ªói ƒë·∫øm b·ªã nh√¢n ƒë√¥i
                if re.search(r"Destination: .*|has already been downloaded", line):
                    if source == "youtube": 
                        self.youtube_downloaded_count += 1
                        current_downloaded = self.youtube_downloaded_count
                    elif source == "tiktok": 
                        self.tiktok_downloaded_count += 1
                        current_downloaded = self.tiktok_downloaded_count
                    elif source == "facebook": # LOGIC FACEBOOK
                        self.facebook_downloaded_count += 1
                        current_downloaded = self.facebook_downloaded_count
                    
                    self.update_progress_label(progress_label, current_downloaded, current_total)
                
                self.update_status(status_label, f"ƒêang t·∫£i: {line.strip()[:150]}", "purple")
                
            self.process.wait()

            # L·∫•y s·ªë l∆∞·ª£ng ƒë√£ t·∫£i cu·ªëi c√πng
            if source == "youtube": 
                current_downloaded = self.youtube_downloaded_count
            elif source == "tiktok": 
                current_downloaded = self.tiktok_downloaded_count
            elif source == "facebook": # LOGIC FACEBOOK
                current_downloaded = self.facebook_downloaded_count

            # LOGIC KI·ªÇM TRA K·∫æT TH√öC: S·ª≠a l·ªói M√£ 101
            # N·∫øu ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng y√™u c·∫ßu, coi l√† ho√†n t·∫•t.
            is_success_by_count = current_total > 0 and current_downloaded >= current_total
            
            if is_success_by_count or self.process.returncode == 0:
                # C·∫≠p nh·∫≠t l·∫°i l·∫ßn cu·ªëi
                self.master.after(0, self.update_progress_label, progress_label, current_downloaded, current_total)
                self.update_status(status_label, f"T·∫¢I HO√ÄN T·∫§T! ƒê√£ t·∫£i {current_downloaded}/{current_total} video.", "green")
            
            elif self.is_downloading == False: 
                 self.update_status(status_label, f"ƒê√É D·ª™NG T·∫¢I b·ªüi ng∆∞·ªùi d√πng. ƒê√£ t·∫£i {current_downloaded}/{current_total}.", "red")
            else:
                self.update_status(status_label, f"T·∫¢I TH·∫§T B·∫†I. M√£ l·ªói: {self.process.returncode}.", "red")
                
        except FileNotFoundError:
            self.update_status(status_label, "L·ªói T·∫£i: Kh√¥ng t√¨m th·∫•y yt-dlp.", "red")

        finally:
            self.is_downloading = False
            # K√≠ch ho·∫°t l·∫°i c√°c n√∫t sau khi t·∫£i xong/l·ªói
            if source == "youtube": 
                self.master.after(0, self.youtube_scan_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.youtube_batch_download_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.youtube_batch_stop_button.config, {"state": tk.DISABLED})
            elif source == "tiktok": 
                self.master.after(0, self.tiktok_scan_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.tiktok_batch_download_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.tiktok_batch_stop_button.config, {"state": tk.DISABLED})
            elif source == "facebook": # LOGIC FACEBOOK
                self.master.after(0, self.facebook_scan_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.facebook_batch_download_button.config, {"state": tk.NORMAL})
                self.master.after(0, self.facebook_batch_stop_button.config, {"state": tk.DISABLED})

# --- KH·ªûI CH·∫†Y ·ª®NG D·ª§NG ---
if __name__ == "__main__":
    root = tk.Tk()
    app = DownloaderApp(root)
    root.mainloop()